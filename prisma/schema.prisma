// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model Task {
    id          String    @id @default(cuid())
    title       String
    description String?
    priority    Int       @default(3) // 1-5, higher is more important
    spiciness   Int       @default(3) // 1-5 peppers, difficulty/length
    deadline    DateTime?
    status      TaskStatus @default(INBOX)
    
    // Time tracking
    totalTimeSpent Int      @default(0) // in seconds
    lastStartedAt  DateTime?
    
    // Dates
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    completedAt DateTime?
    postponedUntil DateTime?
    acceptedAt  DateTime? // When moved to TODAY
    trashedAt   DateTime?
    
    // Relations
    user        User     @relation(fields: [userId], references: [id])
    userId      String
    subtasks    Subtask[]
    timeSessions TimeSession[]
    
    @@index([userId, status])
    @@index([userId, postponedUntil])
}

model Subtask {
    id          String   @id @default(cuid())
    title       String
    completed   Boolean  @default(false)
    order       Int
    
    task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
    taskId      String
    
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    
    @@index([taskId])
}

model TimeSession {
    id        String   @id @default(cuid())
    startedAt DateTime @default(now())
    endedAt   DateTime?
    duration  Int?     // in seconds, calculated when session ends
    
    task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
    taskId    String
    
    @@index([taskId])
}

enum TaskStatus {
    INBOX
    TODAY
    IN_PROGRESS
    PAUSED
    COMPLETED
    TRASH
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    lastResetDate DateTime  @default(now()) // Track last daily reset
    accounts      Account[]
    sessions      Session[]
    tasks         Task[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
